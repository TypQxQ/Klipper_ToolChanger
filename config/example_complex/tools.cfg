# Config order: ToolGroups must come before tools that use them. Tool that are used as physical_parent must be configured before other virtual tools that use that as parent.


# Enables saving of variables between powerdown of machine. Must be configured before [toollock].
[save_variables]
filename:  ~/variables.cfg

[ktcclog] # Log_level & logfile_level can be set to one of (0 = essential, 1 = info, 2 = debug, 3 = trace)
log_level: 2
logfile_level: 3

[toollock]
purge_on_toolchange = True          # Here we can disable all purging. When disabled it overrides all other purge options. Defaults to true. This can be turned off by a macro for automatic probing hot tools without probing them. For example when doing TAMV or ZTATP.
#init_printer_to_last_tool = True   #Initialise as it was turned off, unlock tool if none was loaded or lock if one was loaded. Defaults to True
tool_lock_gcode:
    SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set assumed possition as rotated to min
    MANUAL_STEPPER STEPPER=tool_lock Move=1 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1      # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0                                   # Raise current of stepper temporarily
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=1 SYNC=1     # Move to max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    M400
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7                                   # Decrease current to standard current.
    RESTORE_GCODE_STATE NAME=tool_unlock_state MOVE=0                               # Restore gcode state
    M117 "Unknown tool Loaded"                                                      # Tool Loaded Message that stays on display.

tool_unlock_gcode:
    SAVE_GCODE_STATE NAME=tool_lock_state                                           # Save gcode state
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=180                               # Set assumed possition as rotated to max
    MANUAL_STEPPER STEPPER=tool_lock Move=179 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1    # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    MANUAL_STEPPER STEPPER=tool_lock Move=0 SPEED=100 STOP_ON_ENDSTOP=1 SYNC=1      # Move to min and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    M400
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    MANUAL_STEPPER STEPPER=tool_lock ENABLE=0                                       # Turn off the stepper while unlocked so it can rest without triggering the endswitch
    RESTORE_GCODE_STATE NAME=tool_lock_state MOVE=0                                 # Restore gcode state
    M117 Tool Unloaded                                                              # Tool UnLoaded Message that stays on display.

[toolgroup 0]
is_virtual: True            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
physical_parent: 0          # Tool used as a Physical parent for all toos of this group. Only used if the tool i virtual.
#idle_to_standby_time: 30
#idle_to_powerdown_time: 600
virtual_toolload_gcode:
  # Because the virtual tools match the number on ERCF I just call that.
  SUB_VIRTUALTOOL_LOAD T={myself.name}
virtual_toolunload_gcode:
  SUB_VIRTUALTOOL_UNLOAD T={myself.name}


# Used to group several tools with similar settings.
[toolgroup 1]
is_virtual: False            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

##### Selectable tool. Must be configured after [toolgroup n].
[tool 0]
tool_group: 0                     # Must be used and configured before this tool
##### Following can be inherited from Physical parent if not specified for this tool. Needed only by physical tools.
extruder: extruder
fan: partfan_t0
zone: 550,5
park: 598,5
offset: 11.406,3.778,3.537
#####
##### Following can be inherited from ToolGroup if not specified for this tool or inherited from a Physical parent.
#physical_parent:                  # Defaults to None.
#is_virtual: False                 # Defaults to False
meltzonelength: 14 #18                 # Defaults to 0
#####
##### Options below have no effect on Virtual tools.
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 600       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
shaper_freq_x: 137.2
shaper_freq_y: 116.4
shaper_type_x: 2hump_ei
shaper_type_y: 2hump_ei

#pickup_gcode= The code that is run when picking up the physical tool. Variable {myself} refers to the tool calling this code.
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  RESPOND MSG="dropoff_gcode. in t0"
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

[tool 1]
tool_group: 0

[tool 2]
tool_group: 0
[tool 3]
tool_group: 0
[tool 4]
tool_group: 0
[tool 5]
tool_group: 0
[tool 6]
tool_group: 0
[tool 7]
tool_group: 0
[tool 8]
tool_group: 0

# End of Tool 0 virtual tools.

[tool 9]
tool_group: 1
extruder: extruder1
fan: partfan_t9
zone: 550,100
park: 598,100
offset: -1.046,-0.220,-1.510
meltzonelength: 14 #18
idle_to_standby_time: 0.1
shaper_freq_x: 126.8
shaper_freq_y: 128.6
shaper_type_x: 3hump_ei
shaper_type_y: 3hump_ei

[tool 10]
tool_group: 1
extruder: extruder2
fan: partfan_t10
zone: 550,200
park: 598,200
offset: 12.069,4.472,3.180
meltzonelength: 14 #18
idle_to_standby_time: 0.1
shaper_freq_x: 119.8
shaper_freq_y: 126.6
shaper_type_x: mzv
shaper_type_y: 2hump_ei

[tool 49]
tool_group: 1
zone: 560,515
park: 598,515
offset: 0,0,0
# Just to reset the input shaper.
#shaper_freq_x: 0
#shaper_freq_y: 0
#shaper_type_x: mzv
#shaper_type_y: mzv

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.x < 500 %}                           # If Printer inside safezone:
    G0 X500 Y{myself.zone[1]} F40000                                     # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 X500 F40000                                                       # Fast move X inside the safezone, so we don't crash into other tools.
    G0 Y{myself.zone[1]} F40000                                          # Fast move Y in front of parking spot.
  {% endif %}                                                          # /

  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]|int - 15}  F40000                                # Fast Move near the pickup position for tool.
  G0 X{myself.park[0]} F3000                                           # Slow Move to the pickup position for tool.

  ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  TOOL_LOCK                                                            # Lock the tool.
  SET_GCODE_OFFSET Z={myself.offset[2]} MOVE=1                         # Set and move the Z offset. Avoid crashing into bed when moving out later.

  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none" %}              # If the tool has an extruder:
    M116 P{myself.name}                                                  # Wait for tool to reach target temperature.
  {% endif %}                                                          # /

  ##############  Move out to zone  ##############
  G0 X{myself.zone[0]} F6000                                           # Slow Move to the zone position for tool.

[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}
  {%set ktcc = printer['ktcc_toolchanger']%}
    ##############  Move out to Safe position  ##############
  G0 X500 F40000                                                       # Fast Move to the safe position for tools.

    ##############  Check Tool Lock  ##############
  QUERY_ENDSTOPS                                                       # Check the endstops and save the state to be retrieved in the macro below.
  TOOL_LOCK_CHECK                                                      # MAcro to check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.

    ##############  Finnish up  ##############
  M400                                                                 # Wait for current moves to finish.
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP MOVE=0                          # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START. Move fast to last location.
                                                                       # Set the toolhead offsets. Z is set and moved before any moves in SUB_TOOL_PICKUP_START. Needs to be after any RESTORE_GCODE_STATE!
  SET_GCODE_OFFSET X={myself.offset[0]|int  + ktcc.global_offset[0]|int } Y={myself.offset[1]|int  + ktcc.global_offset[1]|int } Z={myself.offset[2]|int  + ktcc.global_offset[2]|int } MOVE=0

    ##############  Return to saved position  ##############
  G1 F40000
  RESTORE_POSITION

  SAVE_GCODE_STATE NAME=TOOL_PICKUP2                            # Save state for priming nozzle
#  RESPOND MSG="First if:{myself.extruder|default("none")|lower}"

    ##############  Prime the filament, asume it was retracted as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
#    RESPOND MSG="First if1:{myself.extruder|default("none")|lower}"
#    RESPOND MSG="Second if:{printer[myself.extruder].can_extrude|default("false")|lower}"
#    RESPOND MSG="Second if1:{printer.toollock.purge_on_toolchange}"
                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
#      RESPOND MSG="Second if2:{printer[myself.extruder].can_extrude|default("false")|lower}"
#      RESPOND MSG="Second if3:{printer.toollock.purge_on_toolchange}"
      M83                                                           # Relative extrusion
      G1 E{myself.meltzonelength|int - 2} F1300                     # DeRetract filament from meltzone
      G1 E2 F400                                                    # DeRetract filament from meltzone
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP2                          # Restore state after priming nozzle
  G1 F30000
  RESTORE_ACCELERATION                                           # Restore saved acceleration value.



[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  SAVE_ACCELERATION                                            # Save current acceleration value.
  M204 S8000                                                   # Set high acceleration for toolchanging

  {% if myself.name|int != printer.toollock.tool_current|int %}
    { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

    ##############  Retract the filament as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby

    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
      M83                                                           # Relative extrusion
      G1 E-4 F2700                                                  # retract filament from meltzone
      G1 E2 F800                                                    # Extrude slightly to form a tip
      G1 E-{myself.meltzonelength|int - 2} F800                     # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002                        # Save GCode state.
  G90                                                           # Absolute positions

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.

  # Fast Move to the general pickup position for tools.
  {% if printer.toolhead.position.x|int < 500 %}
    G0 X500 Y{myself.zone[1]} F40000  # Move near pickup and lift z so we don't crash the bed later.
  {% else %}
    G0 X500 F40000               # Move X and lift z so we don't crash the bed or into other tools.
    G0 Y{myself.zone[1]} F40000            # Move Y after X and Z
  {% endif %}
  M400                                # Wait for current moves to finish

  G0 X{myself.zone[0]} F40000              # Fast Move near the dropoff position for tool.
  G0 X{myself.park[0]} F3000               # Slow Move to the dropoff position for tool.


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  M400                                # Wait for current moves to finish
  TOOL_UNLOCK                         # Unlock the tool

  G0 X{myself.park[0]|int - 15} F6000     # Slow Move to the pickup position for tool.
  G0 X500 F40000                           # Fast Move to the general pickup position for tools.
  M400

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002 MOVE=0   # Restore Gcode state
  RESTORE_ACCELERATION                # Restore saved acceleration value.

[gcode_macro SUB_VIRTUALTOOL_LOAD]
description: Internal subroutine. Do not use!
# Tnnn: Tool to load
gcode:
  {%set myself = printer['tool '~params.T]%}

  SET_TOOL_TEMPERATURE TOOL={myself.name} CHNG_STATE=2                 # Put tool heater in Active mode

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  SAVE_GCODE_STATE NAME=VIRTUALTOOL_LOAD                               # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  SET_GCODE_OFFSET X=0 Y=0                                             # Set XY offset to 0 so we park the tool right.
  G90                                                                  # Absolute positions

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.x < 500 %}                           # If Printer inside safezone:
    G0 X500 Y{myself.zone[1]} F40000                                     # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 X500 F40000                                                       # Fast move X inside the safezone, so we don't crash into other tools.
    G0 Y{myself.zone[1]} F40000                                          # Fast move Y in front of parking spot.
  {% endif %}                                                          # /
  G0 X{myself.zone[0]} F40000                                          # Fast Move to the zone position for tool.

  ##############  Wait for heater  ##############
  TEMPERATURE_WAIT_WITH_TOLERANCE TOOL={myself.name}                   # Wait for tool to reach target temperature.

  ##############  Load ERCF Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  G4 P5000                                                             # Wait 5s so any fiament inside the hotend will get molten before tip forming.
  ERCF_CHANGE_TOOL TOOL={myself.name} STANDALONE=1                     # Load the ERCF tool.

  ##############  Clear the filament by purging  ##############
  M83                                                                  # Relative extrusion
  G1 E50 F300                                                          # Purge filament for new.
  G1 E25 F300                                                          # Purge filament for new.
  G1 E-1 F2400                                                         # Equalize pressure.

  ##############  Wipe the nozzle  ##############
  SUB_TOOL_WIPE T={myself.name}                                         # Wipe the tool at the toolpost.
  G0 X{myself.zone[0]} F3000                                          # Fast Move to the zone position for tool.

  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]} F3000                                           # Slow Move to the pickup position for tool.

  ##############  Move out to zone  ##############
  G0 X{myself.zone[0]} F6000                                           # Slow Move to the zone position for tool.

  ##############  Move out to Safe position  ##############
  G0 X500 F40000                                                       # Fast Move to the safe position for tools.

  ##############  Finnish up  ##############
  M400                                                                 # Wait for current moves to finish.
  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=VIRTUALTOOL_LOAD MOVE=0                     # Restore GCODE state. Was saved at the begining of SUB_VIRTUALTOOL_LOAD_START. No move.

  ##############  Return to saved position  ##############
  G1 F40000
  RESTORE_POSITION                                                     # This checks if the position is to be restored or not.
  RESTORE_ACCELERATION                                                 # Restore saved acceleration value.

[gcode_macro SUB_VIRTUALTOOL_UNLOAD]
description: Internal subroutine. Do not use!
# Tnnn: Tool to unload
gcode:
  {%set myself = printer['tool '~params.T]%}

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  SAVE_GCODE_STATE NAME=VIRTUALTOOL_UNLOAD                             # Save GCode state.
  SET_GCODE_OFFSET X=0 Y=0                                             # Set XY offset to 0 so we park the tool right.
  G90                                                                  # Absolute positions

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X max as EmergencyStop.

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.x|int < 500 %}
    G0 X500 Y{myself.zone[1]} F40000                                   # Move near pickup and lift z so we don't crash the bed later.
  {% else %}
    G0 X500 F40000                                                     # Move X and lift z so we don't crash the bed or into other tools.
    G0 Y{myself.zone[1]} F40000                                        # Move Y after X and Z
  {% endif %}
  M400                                                                 # Wait for current moves to finish

  G0 X{myself.zone[0]} F40000                                          # Fast Move near the dropoff position for tool.

  ##############  Wait for heater  ##############
  M116 P{myself.name}                                                  # Wait for tool to reach target temperature.

  ##############  Ejecting filament from ERCF  ##############
  G4 P5000                                                             # Wait 5s so any fiament inside the hotend will get molten before tip forming.
  ERCF_EJECT

  ##############  Wipe the nozzle  ##############
  SUB_TOOL_WIPE T={myself.name}                                          # Wipe the tool at the toolpost.

  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]} F3000                                           # Slow Move to the dropoff position for tool to remove any excess filament on tool.

  M400                                                                 # Wait for current moves to finish

  G0 X{myself.park[0]|int - 15} F6000                                  # Slow Move to the pickup position for tool.
  G0 X500 F40000                                                       # Fast Move to the general pickup position for tools.
  M400

  SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=VIRTUALTOOL_UNLOAD MOVE=0                   # Restore Gcode state
  RESTORE_ACCELERATION                                                 # Restore saved acceleration value.

[gcode_macro SUB_TOOL_WIPE]
description: Internal subroutine. Do not use!
# Tnnn: Tool
gcode:
  {%set myself = printer['tool '~params.T]%}
  ##############  Wipe the nozzle  ##############
  G0 X{myself.park[0]|int - 10}  F3000                                # Fast Move near the pickup position for tool.
  G0 X{myself.zone[0]} F3000                                          # Fast Move to the zone position for tool.
  G0 X{myself.park[0]|int - 10}  F3000                                # Fast Move near the pickup position for tool.
  G0 X{myself.zone[0]} F3000                                          # Fast Move to the zone position for tool.
  G0 X{myself.park[0]|int - 10}  F3000                                # Fast Move near the pickup position for tool.
  G0 X{myself.zone[0]} F3000                                          # Fast Move to the zone position for tool.
  G0 X{myself.park[0]|int - 10}  F3000                                # Fast Move near the pickup position for tool.
  G0 X{myself.zone[0]} F3000                                          # Fast Move to the zone position for tool.

